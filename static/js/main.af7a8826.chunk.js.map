{"version":3,"sources":["MapGrid.tsx","utils.ts","jobs.ts","Household.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["gridDefs","require","features","MapGrid","props","rows","cols","tileSize","useState","focus","setFocus","focusChar","grid","charAt","focusKey","focusTile","feature","rects","size","out","row","col","ch","push","x","y","width","height","onMouseOver","onClick","console","log","style","fill","color","stroke","makeRects","border","display","flexDirection","margin","onMouseLeave","flexShrink","marginTop","fontSize","fontFamily","fontWeight","maxWidth","name","description","JOBS","parse","map","parseInt","AGES","SEXES","HSIZE","ARTHROPOD","MAMMAL","TETRAPOD","SPECIES","SHAPES","VARIANTS","VARIANT_OTHER","species","special","Math","random","base","choose","rank2","hasJob","age","src","val","rint","reduce","prev","curr","i","length","Array","isArray","max","floor","rlog","person","hSize","spec","shape","thisSpec","thisShape","nVariants","variants","_","type","n","head","arms","legs","tail","other","v","vari","filter","join","sex","job","household","j","Household","house","setHouse","p","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af7a8826.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport grid from './data/grid.json';\n\n// import as an \"any\" to get around some typechecking\nconst gridDefs = require('./data/gridDefs.json');\nconst features = require('./data/features.json');\n\ntype Props = {\n    rows: number,\n    cols: number,\n    tileSize: number\n}\n\nexport default function MapGrid(props: Props) {\n    const { rows, cols, tileSize } = props;\n\n    const [focus, setFocus] = useState<[number, number] | null>(null);\n    const focusChar = focus == null ? '.' : grid[focus[0]].charAt(focus[1]);\n\n    const focusKey = focus && `${focus[0]}-${focus[1]}`;\n\n    const focusTile = gridDefs[focusChar];\n    const feature = focusKey && features[focusKey];\n\n    function makeRects(rows: number, cols: number, size: number, focusChar: string) {\n        const out = [];\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                const ch = grid[row][col];\n                out.push(\n                    <rect\n                        x={col * size}\n                        y={row * size}\n                        width={size}\n                        height={size}\n                        onMouseOver={() => setFocus([row, col])}\n                        onClick={() => { if (feature != null) console.log(feature); }}\n                        style={{\n                            fill: gridDefs[ch].color,\n                            stroke: focusChar !== '.' && focusChar === ch ?\n                                'rgba(255,255,255,0.3)' :\n                                'rgba(0, 0, 0, 0.3)'\n                        }}\n                    />\n                )\n            }\n        }\n        return out;\n    }\n\n    let rects = makeRects(rows, cols, tileSize, focusChar);\n\n    return (\n        <div style={{ border: '1px solid white', display: 'flex', flexDirection: 'row' }}>\n            <svg\n                height={rows * tileSize}\n                width={cols * tileSize}\n                style={\n                    {\n                        border: '1px solid white',\n                        margin: '10px'\n                    }\n                }\n                onMouseLeave={() => setFocus(null)}\n            >\n                {rects}\n            </svg>\n            <div style={{ flexShrink: 1, display: 'flex', flexDirection: 'column' }}>\n                <svg\n                    height={256}\n                    width={256}\n                    style={{\n                        marginTop: '10px',\n                        border: '1px solid yellow'\n                    }}\n                >\n\n                </svg>\n                <div style={\n                    {\n                        fontSize: '18px',\n                        fontFamily: 'Raleway',\n                        fontWeight: 300,\n                        color: 'white',\n                        margin: '10px',\n                        maxWidth: '256px'\n                    }\n                }>\n                    {focus == null ? 'Hover over the map' : focusTile.name}\n                </div>\n                <div style={\n                    {\n                        fontSize: '14px',\n                        fontFamily: 'Raleway',\n                        fontWeight: 300,\n                        color: 'white',\n                        margin: '0px 10px 10px 10px',\n                        maxWidth: '256px'\n                    }\n                }>\n                    {focus == null ? ' ' : focusTile.description}\n                </div>\n            </div>\n\n        </div>\n    );\n}","import parse from 'csv-parse/lib/sync';\n\nimport { JOBS as JOBSsrc } from './jobs';\n\ntype Index<T> = [T | Index<T>, number][]\n\nconst JOBS = parse(JOBSsrc).map((row: string[]) => [row[0], parseInt(row[1])]) as Index<string>;\n\nconst AGES: Index<number> = [\n    [0, 36843],\n    [5, 37423],\n    [10, 41352],\n    [15, 47091],\n    [20, 47890],\n    [25, 44255],\n    [30, 39449],\n    [35, 30955],\n    [40, 26467],\n    [45, 24677],\n    [50, 26010],\n    [55, 25852],\n    [60, 22739],\n    [65, 19922],\n    [70, 15688],\n    [75, 11750],\n    [80, 6383],\n    [85, 3651],\n    [90, 1239],\n    [95, 264],\n    [100, 29]\n]\n\nconst SEXES: Index<string> = [\n    ['M', 9],\n    ['F', 9],\n    ['X', 1]\n];\n\nconst HSIZE: Index<number> = [\n    [1, 22999],\n    [2, 30114],\n    [3, 16128],\n    [4, 14456],\n    [5, 6213],\n    [6, 2143],\n    [7, 864],\n    [8, 288],\n    [9, 96],\n    [10, 35],\n    [11, 9],\n    [12, 3]\n]\n\nconst ARTHROPOD: Index<string> = [\n    ['arachnid', 2],\n    ['myriapod', 1],\n    ['crustacean', 2],\n    ['insect', 10]\n]\n\n\nconst REPTILE: Index<string> = [\n    ['snake', 2],\n    ['lizard', 3],\n    ['turtle', 1]\n]\n\nconst MARSUPIAL: Index<string> = [\n    ['kangaroo', 2],\n    ['wallaby', 1],\n    ['opossum', 2],\n    ['glider', 1],\n    ['wombat', 2],\n    ['koala', 1]\n]\n\nconst RODENT: Index<string> = [\n    ['squirrel', 2],\n    ['beaver', 2],\n    ['kangaroo rat', 2],\n    ['mouse', 3],\n    ['rat', 3],\n    ['chinchilla', 1],\n    ['guinea pig', 1],\n    ['capybara', 1],\n]\n\nconst CANIFORM: Index<string> = [\n    [[\n        ['wolf', 5],\n        ['fox', 5],\n        ['jackal', 4],\n        ['coyote', 4],\n        ['dog', 5],\n    ], 10],\n    [[\n        ['bear', 2],\n        ['panda', 1],\n    ], 5],\n    [[\n        ['badger', 3],\n        ['wolverine', 1],\n        ['marten', 1],\n        ['weasel', 2],\n        ['ferret', 3],\n        ['mink', 2],\n        ['otter', 2]\n    ], 3],\n    [[\n        ['raccoon', 5],\n        ['coati', 1],\n        ['ringtail', 1]\n    ], 1],\n    [[\n        ['seal', 2],\n        ['walrus', 1],\n    ], 1],\n    ['red panda', 2],\n    ['skunk', 1]\n]\n\nconst FELIFORM: Index<string> = [\n    ['hyena', 3],\n    ['mongoose', 3],\n    [[\n        [[\n            ['lion', 2],\n            ['leopard', 2],\n            ['tiger', 2],\n            ['snow leopard', 2]\n        ], 10],\n        ['serval', 2],\n        ['ocelot', 2],\n        ['lynx', 2],\n        ['puma', 2],\n        ['cheetah', 2],\n        ['cat', 2]\n    ], 25]\n]\n\nconst MAMMAL: Index<string> = [\n    ['echidna', 1],\n    ['platypus', 1],\n    [MARSUPIAL, 4],\n    ['pachyderm', 5],\n    ['aardvark', 3],\n    ['manatee', 1],\n    ['rabbit', 3],\n    ['hare', 3],\n    [RODENT, 24],\n    ['hedgehog', 1],\n    ['bat', 4],\n    ['pangolin', 1],\n    ['sloth', 2],\n    ['armadillo', 1],\n    ['lemur', 3],\n    ['monkey', 2],\n    [CANIFORM, 35],\n    [FELIFORM, 20],\n    ['other mammal', 6]\n]\n\nconst BIRD: Index<string> = [\n    [[\n        ['ostrich', 2],\n        ['emu', 2],\n        ['cassowary', 1],\n        ['kiwi', 1]\n    ], 5],\n    [[\n        [[\n            ['chicken', 5],\n            ['turkey', 2],\n            ['pheasant', 4],\n            ['quail', 3],\n            ['partridge', 2],\n            ['peafowl', 3]\n        ], 10],\n        [[\n            ['duck', 3],\n            ['goose', 3],\n            ['swan', 2]\n        ], 10],\n        ['hummingbird', 5],\n        ['pigeon', 5],\n        ['dove', 5],\n        ['crane', 5],\n        ['flamingo', 5],\n        [[\n            ['seagull', 5],\n            ['albatross', 3],\n            ['pelican', 3],\n            ['penguin', 5],\n            ['stork', 5],\n            ['cormorant', 4]\n        ], 10],\n        [[\n            ['vulture', 4],\n            ['hawk', 4],\n            ['eagle', 4],\n            ['owl', 4],\n            ['hornbill', 3],\n            ['kingfisher', 3],\n            ['woodpecker', 3],\n            ['toucan', 2]\n        ], 10],\n        [[\n            ['falcon', 4],\n            ['parrot', 4],\n            [[\n                [[\n                    ['crow', 10],\n                    ['raven', 8],\n                    ['jay', 8],\n                    ['magpie', 3]\n                ], 10],\n                [[\n                    ['sparrow', 10],\n                    ['cardinal', 8],\n                    ['swallow', 6]\n                ], 10]\n            ], 16]\n        ], 10]\n    ], 95]\n]\n\nconst TETRAPOD: Index<string> = [\n    ['frog/toad', 3.5],\n    ['other amphibian', 1.5],\n    [BIRD, 12],\n    [REPTILE, 8],\n    [MAMMAL, 75]\n];\n\nconst SPECIES: Index<string> = [\n    ['hybrid', 10],\n    ['fish', 3.3],\n    [TETRAPOD, 66.7],\n    [ARTHROPOD, 10],\n    ['inorganic', 4]\n];\n\nconst SHAPES: Index<string> = [\n    ['10', 2],\n    ['30', 1],\n    ['50', 7],\n    ['70', 7],\n    ['90', 1]\n]\n\nconst VARIANTS: Index<string> = [\n    ['+arms', 3],\n    ['+legs', 3],\n    ['+head', 2],\n    ['+tail', 2],\n    ['+other', 1]\n]\n\nconst VARIANT_OTHER: Index<string> = [\n    ['wings', 30],\n    ['antennae', 30],\n    ['armor', 20],\n    ['recurrent', 1],\n    ['other', 10]\n]\n\nfunction species(): string {\n    const special = Math.random() < 0.1 ? '!' : '';\n    const base = choose(SPECIES);\n    if (base === 'hybrid') return `${species()}+${species()}`\n    if (base === 'arthropod') return special + choose(ARTHROPOD);\n    if (base !== 'tetrapod') return special + base;\n    const rank2 = special + choose(TETRAPOD);\n    if (rank2 !== 'mammal') return special + rank2;\n    return special + choose(MAMMAL);\n}\n\nfunction hasJob(age: number): boolean {\n    if (age <= 15) return false;\n    if (age <= 24) return Math.random() < 0.7;\n    if (age <= 55) return Math.random() < 0.85;\n    if (age <= 65) return Math.random() < 0.5;\n    return false;\n}\n\nexport function choose<T>(src: Index<T>): T {\n    const sum = src\n        .map(([_, n]) => n)\n        .reduce((prev, curr) => prev + curr);\n\n    let val = rint(sum);\n    for (let i = 0; i < src.length; i++) {\n        if (val < src[i][1]) {\n            if (Array.isArray(src[i][0])) {\n                const subChoice: Index<T> = src[i][0] as Index<T>;\n                return choose(subChoice);\n            } else return src[i][0] as T;\n        }\n        val -= src[i][1];\n    }\n    return src[src.length - 1][0] as T;\n}\n\nexport function rint(max: number): number {\n    return Math.floor(Math.random() * max);\n}\n\nexport function rlog(base: number): number {\n    return -1 - Math.floor(Math.log(Math.random()) / Math.log(base))\n}\n\nexport function person(hSize: number = 1, spec: string | null = null, shape: string | null = null) {\n    const age = (choose(AGES) as number) + rint(5);\n    const thisSpec = spec == null ? species() : (Math.random() * hSize) > 1 ? spec : species();\n    const thisShape = shape == null ? choose(SHAPES) : (Math.random() * hSize) > 1 ? shape : choose(SHAPES);\n\n    const nVariants = rlog(6);\n    const variants = [...new Array(nVariants)]\n        .map((_) => ({ type: choose(VARIANTS), n: rlog(5) + 1 }))\n\n    let head = 1, arms = 2, legs = 2, tail = 1, other = [];\n    for (const v of variants) {\n        const { type, n } = v;\n        switch (type) {\n            case '+head': head += n; break;\n            case '+arms': arms += 2 * n; break;\n            case '+legs': legs += 2 * n; break;\n            case '+tail': tail += n; break;\n            case '+other': other.push(choose(VARIANT_OTHER)); break;\n            default:\n                break;\n        }\n    }\n    const vari = [\n        `${head > 1 ? `${head} heads` : ''}`,\n        `${arms > 2 ? `${arms} arms` : ''}`,\n        `${legs > 2 ? `${legs} legs` : ''}`,\n        `${tail > 1 ? `${tail} tails` : ''}`, ...other].filter((x) => x !== '').join(', ');\n\n    return { age, sex: choose(SEXES), species: thisSpec, shape: thisShape, variants: vari, job: hasJob(age) ? choose(JOBS) : null }\n\n}\n\nexport function household() {\n    const size = choose(HSIZE) as number;\n    const spec = species();\n    const shape = choose(SHAPES);\n    const out = [];\n\n    for (let j = 0; j < size; j++) {\n\n        out.push(person(size, spec, shape));\n    }\n\n    return out;\n}","export const JOBS = `Chief executives,1065395\r\nGeneral and operations managers,814605\r\nLegislators,13360\r\nAdvertising and promotions managers,39150\r\nMarketing and sales managers,815015\r\nPublic relations and fundraising managers,49680\r\nAdministrative services managers,134295\r\nComputer and information systems managers,558310\r\nFinancial managers,1038450\r\nCompensation and benefits managers,17075\r\nHuman resources managers,361445\r\nTraining and development managers,47480\r\nIndustrial production managers,217020\r\nPurchasing managers,178945\r\n\"Transportation, storage, and distribution managers\",215350\r\n\"Farmers, ranchers, and other agricultural managers\",432200\r\nConstruction managers,561410\r\nEducation administrators,738200\r\nArchitectural and engineering managers,144350\r\nFood service managers,697710\r\nFuneral service managers,5735\r\nGaming managers,15095\r\nLodging managers,101995\r\nMedical and health services managers,598380\r\nNatural sciences managers,17865\r\nPostmasters and mail superintendents,20945\r\n\"Property, real estate, and community association managers\",449590\r\nSocial and community service managers,289600\r\nEmergency management directors,7295\r\n\"Managers, all other\",3680155\r\n\"Agents and business managers of artists, performers, and athletes\",31255\r\n\"Buyers and purchasing agents, farm products\",7580\r\n\"Wholesale and retail buyers, except farm products\",128120\r\n\"Purchasing agents, except wholesale, retail, and farm products\",246980\r\n\"Claims adjusters, appraisers, examiners, and investigators\",262880\r\nCompliance officers,221825\r\nCost estimators,118655\r\nHuman resources workers,646680\r\n\"Compensation, benefits, and job analysis specialists\",46305\r\nTraining and development specialists,108430\r\nLogisticians,112405\r\nManagement analysts,612380\r\n\"Meeting, convention, and event planners\",88390\r\nFundraisers,66490\r\nMarket research analysts and marketing specialists,221560\r\n\"Business operations specialists, all other\",226955\r\nAccountants and auditors,1571375\r\nAppraisers and assessors of real estate,72580\r\nBudget analysts,41410\r\nCredit analysts,25085\r\nFinancial analysts,184355\r\nPersonal financial advisors,316375\r\nInsurance underwriters,94905\r\nFinancial examiners,14305\r\nCredit counselors and loan officers,281580\r\n\"Tax examiners and collectors, and revenue agents\",41435\r\nTax preparers,53630\r\n\"Financial specialists, all other\",46950\r\nComputer and information research scientists,15920\r\nComputer systems analysts,431495\r\nInformation security analysts,72830\r\nComputer programmers,358785\r\n\"Software developers, applications and systems software\",1085705\r\nWeb developers,129610\r\nComputer support specialists,526500\r\nDatabase administrators,97105\r\nNetwork and computer systems administrators,189105\r\nComputer network architects,91680\r\n\"Computer occupations, all other\",549625\r\nActuaries,23280\r\nMathematicians,1290\r\nOperations research analysts,123420\r\nStatisticians,45370\r\nMiscellaneous mathematical science occupations,2665\r\n\"Architects, except naval\",154410\r\n\"Surveyors, cartographers, and photogrammetrists\",26635\r\nAerospace engineers,111435\r\nAgricultural engineers,1780\r\nBiomedical engineers,12910\r\nChemical engineers,53875\r\nCivil engineers,296415\r\nComputer hardware engineers,47555\r\nElectrical and electronics engineers,181095\r\nEnvironmental engineers,25495\r\n\"Industrial engineers, including health and safety\",176575\r\nMarine engineers and naval architects,10185\r\nMaterials engineers,33025\r\nMechanical engineers,235040\r\n\"Mining and geological engineers, including mining safety engineers\",7925\r\nNuclear engineers,6180\r\nPetroleum engineers,22045\r\n\"Engineers, all other\",457085\r\nDrafters,124270\r\n\"Engineering technicians, except drafters\",304200\r\nSurveying and mapping technicians,50425\r\nAgricultural and food scientists,19845\r\nBiological scientists,61515\r\nConservation scientists and foresters,17615\r\nMedical scientists,114715\r\n\"Life scientists, all other\",3965\r\nAstronomers and physicists,9735\r\nAtmospheric and space scientists,9555\r\nChemists and materials scientists,73010\r\nEnvironmental scientists and geoscientists,60705\r\n\"Physical scientists, all other\",185120\r\nEconomists,21550\r\nSurvey researchers,1410\r\nPsychologists,121390\r\nUrban and regional planners,21595\r\n\"Miscellaneous social scientists and related workers, including sociologists\",23885\r\nAgricultural and food science technicians,25430\r\nBiological technicians,14220\r\nChemical technicians,53635\r\nGeological and petroleum technicians,11805\r\nNuclear technicians,3430\r\nSocial science research assistants,1545\r\n\"Miscellaneous life, physical, and social science technicians\",113315\r\nCounselors,511830\r\nSocial workers,680625\r\nProbation officers and correctional treatment specialists,78355\r\nSocial and human service assistants,139850\r\n\"Miscellaneous community and social service specialists, including health educators and community health workers\",60685\r\nClergy,341115\r\n\"Directors, religious activities and education\",43255\r\n\"Religious workers, all other\",39455\r\nLawyers,890650\r\nJudicial law clerks,10195\r\n\"Judges, magistrates, and other judicial workers\",58445\r\nParalegals and legal assistants,299680\r\nMiscellaneous legal support workers,122600\r\nPostsecondary teachers,856640\r\nPreschool and kindergarten teachers,292735\r\nElementary and middle school teachers,2319595\r\nSecondary school teachers,521535\r\nSpecial education teachers,170945\r\nOther teachers and instructors,328605\r\n\"Archivists, curators, and museum technicians\",34960\r\nLibrarians,113985\r\nLibrary technicians,11100\r\nTeacher assistants,376095\r\n\"Other education, training, and library workers\",72220\r\nArtists and related workers,117265\r\nDesigners,598365\r\nActors,13435\r\nProducers and directors,115800\r\n\"Athletes, coaches, umpires, and related workers\",112125\r\nDancers and choreographers,5370\r\n\"Musicians, singers, and related workers\",61525\r\n\"Entertainers and performers, sports and related workers, all other\",15640\r\nAnnouncers,24725\r\n\"News analysts, reporters and correspondents\",52095\r\nPublic relations specialists,98255\r\nEditors,119510\r\nTechnical writers,46005\r\nWriters and authors,127700\r\nMiscellaneous media and communication workers,50535\r\n\"Miscellaneous media and communications equipment workers, including broadcast and sound engineering technicians and radio operators\",65600\r\nPhotographers,84550\r\n\"Television, video, and motion picture camera operators and editors\",33830\r\nChiropractors,40665\r\nDentists,93295\r\nDietitians and nutritionists,68175\r\nOptometrists,27135\r\nPharmacists,213205\r\nPhysicians and surgeons,743005\r\nPhysician assistants,75060\r\nPodiatrists,6095\r\nAudiologists,11175\r\nOccupational therapists,71140\r\nPhysical therapists,160255\r\nRadiation therapists,10115\r\nRecreational therapists,9850\r\nRespiratory therapists,90070\r\nSpeech-language pathologists,85715\r\n\"Miscellaneous therapists, including exercise physiologists\",101755\r\nVeterinarians,65795\r\nRegistered nurses,2237635\r\nNurse anesthetists,26255\r\nNurse midwives,4000\r\nNurse practitioners,116040\r\n\"Health diagnosing and treating practitioners, all other\",13135\r\nClinical laboratory technologists and technicians,229250\r\nDental hygienists,67230\r\nDiagnostic related technologists and technicians,253485\r\nEmergency medical technicians and paramedics,145275\r\nHealth practitioner support technologists and technicians,390375\r\nLicensed practical and licensed vocational nurses,562130\r\nMedical records and health information technicians,142695\r\n\"Opticians, dispensing\",44845\r\nMiscellaneous health technologists and technicians,91440\r\nOther healthcare practitioners and technical occupations,100715\r\n\"Nursing, psychiatric, and home health aides\",1110685\r\nOccupational therapy assistants and aides,13450\r\nPhysical therapist assistants and aides,54605\r\nMassage therapists,64170\r\nDental assistants,141515\r\nMedical assistants,332910\r\nMedical transcriptionists,18910\r\nPharmacy aides,19265\r\nVeterinary assistants and laboratory animal caretakers,22420\r\nPhlebotomists,73280\r\n\"Healthcare support workers, all other, including medical equipment preparers\",93000\r\nFirst-line supervisors of correctional officers,54495\r\nFirst-line supervisors of police and detectives,99665\r\nFirst-line supervisors of fire fighting and prevention workers,44875\r\n\"First-line supervisors of protective service workers, all other\",64415\r\nFirefighters,253080\r\nFire inspectors,18440\r\n\"Bailiffs, correctional officers, and jailers\",341810\r\nDetectives and criminal investigators,111765\r\nFish and game wardens,4605\r\nParking enforcement workers,4570\r\nPolice and sheriff's patrol officers,637730\r\nTransit and railroad police,745\r\nAnimal control workers,9440\r\nPrivate detectives and investigators,68240\r\nSecurity guards and gaming surveillance officers,571830\r\nCrossing guards,10070\r\nTransportation security screeners,31065\r\n\"Lifeguards and other recreational, and all other protective service workers\",17695\r\nChefs and head cooks,316935\r\nFirst-line supervisors of food preparation and serving workers,330680\r\nCooks,1012065\r\nFood preparation workers,270485\r\nBartenders,192410\r\n\"Combined food preparation and serving workers, including fast food\",102375\r\n\"Counter attendants, cafeteria, food concession, and coffee shop\",22050\r\nWaiters and waitresses,529555\r\n\"Food servers, nonrestaurant\",62355\r\nDining room and cafeteria attendants and bartender helpers,73095\r\nDishwashers,91945\r\n\"Hosts and hostesses, restaurant, lounge, and coffee shop\",26270\r\n\"Food preparation and serving related workers, all other\",3720\r\nFirst-line supervisors of housekeeping and janitorial workers,169475\r\n\"First-line supervisors of landscaping, lawn service, and groundskeeping workers\",123590\r\nJanitors and building cleaners,1463735\r\nMaids and housekeeping cleaners,752125\r\nPest control workers,64170\r\nGrounds maintenance workers,709270\r\nFirst-line supervisors of gaming workers,17915\r\nFirst-line supervisors of personal service workers,68715\r\nAnimal trainers,26325\r\nNonfarm animal caretakers,98565\r\nGaming services workers,57965\r\nMotion picture projectionists,1230\r\n\"Ushers, lobby attendants, and ticket takers\",5005\r\nMiscellaneous entertainment attendants and related workers,44895\r\nEmbalmers and funeral attendants,6055\r\n\"Morticians, undertakers, and funeral directors\",30065\r\nBarbers,62535\r\n\"Hairdressers, hairstylists, and cosmetologists\",399940\r\nMiscellaneous personal appearance workers,192265\r\n\"Baggage porters, bellhops, and concierges\",52670\r\nTour and travel guides,15905\r\nChildcare workers,471590\r\nPersonal care aides,623445\r\nRecreation and fitness workers,165430\r\nResidential advisors,21710\r\n\"Personal care and service workers, all other\",64740\r\nFirst-line supervisors of retail sales workers,2472785\r\nFirst-line supervisors of non-retail sales workers,1045845\r\nCashiers,782130\r\nCounter and rental clerks,44340\r\nParts salespersons,81455\r\nRetail salespersons,1482155\r\nAdvertising sales agents,137575\r\nInsurance sales agents,424035\r\n\"Securities, commodities, and financial services sales agents\",192415\r\nTravel agents,48950\r\n\"Sales representatives, services, all other\",499480\r\n\"Sales representatives, wholesale and manufacturing\",1141155\r\n\"Models, demonstrators, and product promoters\",11250\r\nReal estate brokers and sales agents,562955\r\nSales engineers,34860\r\nTelemarketers,32035\r\n\"Door-to-door sales workers, news and street vendors, and related workers\",46550\r\n\"Sales and related workers, all other\",167920\r\nFirst-line supervisors of office and administrative support workers,1151515\r\n\"Switchboard operators, including answering service\",15970\r\nTelephone operators,21460\r\n\"Communications equipment operators, all other\",6620\r\nBill and account collectors,112225\r\nBilling and posting clerks,378805\r\n\"Bookkeeping, accounting, and auditing clerks\",802110\r\nGaming cage workers,7150\r\nPayroll and timekeeping clerks,128005\r\nProcurement clerks,28320\r\nTellers,168635\r\n\"Financial clerks, all other\",97955\r\nBrokerage clerks,4995\r\nCorrespondence clerks,3850\r\n\"Court, municipal, and license clerks\",60800\r\n\"Credit authorizers, checkers, and clerks\",28525\r\nCustomer service representatives,1564865\r\n\"Eligibility interviewers, government programs\",71895\r\nFile clerks,126455\r\n\"Hotel, motel, and resort desk clerks\",65505\r\n\"Interviewers, except eligibility and loan\",78280\r\n\"Library assistants, clerical\",31190\r\nLoan interviewers and clerks,102395\r\nNew accounts clerks,10635\r\nOrder clerks,85625\r\n\"Human resources assistants, except payroll and timekeeping\",38005\r\nReceptionists and information clerks,553570\r\nReservation and transportation ticket agents and travel clerks,85950\r\n\"Information and record clerks, all other\",73465\r\nCargo and freight agents,16780\r\nCouriers and messengers,132435\r\nDispatchers,229885\r\n\"Meter readers, utilities\",21100\r\nPostal service clerks,95670\r\nPostal service mail carriers,272510\r\n\"Postal service mail sorters, processors, and processing machine operators\",47870\r\n\"Production, planning, and expediting clerks\",266860\r\n\"Shipping, receiving, and traffic clerks\",424810\r\nStock clerks and order fillers,759720\r\n\"Weighers, measurers, checkers, and samplers, recordkeeping\",53605\r\nSecretaries and administrative assistants,2133045\r\nComputer operators,69935\r\nData entry keyers,201930\r\nWord processors and typists,186800\r\nDesktop publishers,1295\r\nInsurance claims and policy processing clerks,304860\r\n\"Mail clerks and mail machine operators, except postal service\",49265\r\n\"Office clerks, general\",785105\r\n\"Office machine operators, except computer\",23385\r\nProofreaders and copy markers,6070\r\nStatistical assistants,14610\r\n\"Office and administrative support workers, all other\",423410\r\n\"First-line supervisors of farming, fishing, and forestry workers\",48780\r\nAgricultural inspectors,12645\r\nAnimal breeders,3235\r\n\"Graders and sorters, agricultural products\",29705\r\nMiscellaneous agricultural workers,408135\r\nFishing and hunting workers,20265\r\nForest and conservation workers,9300\r\nLogging workers,37310\r\nFirst-line supervisors of construction trades and extraction workers,658445\r\nBoilermakers,10280\r\n\"Brickmasons, blockmasons, and stonemasons\",89885\r\nCarpenters,790180\r\n\"Carpet, floor, and tile installers and finishers\",107050\r\n\"Cement masons, concrete finishers, and terrazzo workers\",35195\r\nConstruction laborers,1043200\r\n\"Paving, surfacing, and tamping equipment operators\",10210\r\n\"Operating engineers and other construction equipment operators, including pile-driver operators\",252115\r\n\"Drywall installers, ceiling tile installers, and tapers\",87930\r\nElectricians,594975\r\nGlaziers,33525\r\nInsulation workers,34030\r\n\"Painters, construction and maintenance\",333275\r\nPaperhangers,2070\r\n\"Pipelayers, plumbers, pipefitters, and steamfitters\",433335\r\nPlasterers and stucco masons,20195\r\nReinforcing iron and rebar workers,5230\r\nRoofers,124975\r\nSheet metal workers,87665\r\nStructural iron and steel workers,41645\r\n\"Helpers, construction trades\",20625\r\nConstruction and building inspectors,73350\r\nElevator installers and repairers,21550\r\nFence erectors,18030\r\nHazardous materials removal workers,21565\r\nHighway maintenance workers,80020\r\nRail-track laying and maintenance equipment operators,9615\r\nSeptic tank servicers and sewer pipe cleaners,8165\r\n\"Miscellaneous construction and related workers, including solar photovoltaic installers\",39920\r\n\"Derrick, rotary drill, and service unit operators, oil, gas, and mining\",14915\r\n\"Earth drillers, except oil and gas\",17430\r\n\"Explosives workers, ordnance handling experts, and blasters\",8285\r\nMining machine operators,39700\r\n\"Roof bolters, mining\",1500\r\n\"Roustabouts, oil and gas\",3560\r\nHelpers--extraction workers,1165\r\nOther extraction workers,34370\r\n\"First-line supervisors of mechanics, installers, and repairers\",240775\r\n\"Computer, automated teller, and office machine repairers\",135960\r\nRadio and telecommunications equipment installers and repairers,127710\r\nAvionics technicians,13550\r\n\"Electric motor, power tool, and related repairers\",17770\r\n\"Electrical and electronics installers and repairers, transportation equipment\",1360\r\n\"Electrical and electronics repairers, industrial and utility\",10500\r\n\"Electronic equipment installers and repairers, motor vehicles\",5770\r\nElectronic home entertainment equipment installers and repairers,27510\r\nSecurity and fire alarm systems installers,51045\r\nAircraft mechanics and service technicians,127295\r\nAutomotive body and related repairers,108795\r\nAutomotive glass installers and repairers,12735\r\nAutomotive service technicians and mechanics,642850\r\nBus and truck mechanics and diesel engine specialists,242705\r\nHeavy vehicle and mobile equipment service technicians and mechanics,173205\r\nSmall engine mechanics,30070\r\n\"Miscellaneous vehicle and mobile equipment mechanics, installers, and repairers\",47450\r\nControl and valve installers and repairers,15290\r\n\"Heating, air conditioning, and refrigeration mechanics and installers\",301505\r\nHome appliance repairers,28015\r\nIndustrial and refractory machinery mechanics,334690\r\n\"Maintenance and repair workers, general\",417400\r\n\"Maintenance workers, machinery\",25485\r\nMillwrights,35010\r\nElectrical power-line installers and repairers,96130\r\nTelecommunications line installers and repairers,115030\r\nPrecision instrument and equipment repairers,45720\r\n\"Coin, vending, and amusement machine servicers and repairers\",24205\r\nCommercial divers,2830\r\nLocksmiths and safe repairers,19495\r\nManufactured building and mobile home installers,2295\r\nRiggers,8650\r\nSignal and track switch repairers,4270\r\n\"Helpers--installation, maintenance, and repair workers\",9860\r\n\"Other installation, maintenance, and repair workers, including wind turbine service technicians\",187885\r\nFirst-line supervisors of production and operating workers,811525\r\n\"Aircraft structure, surfaces, rigging, and systems assemblers\",5065\r\n\"Electrical, electronics, and electromechanical assemblers\",97570\r\nEngine and other machine assemblers,10890\r\nStructural metal fabricators and fitters,22270\r\nMiscellaneous assemblers and fabricators,712710\r\nBakers,128365\r\n\"Butchers and other meat, poultry, and fish processing workers\",181925\r\n\"Food and tobacco roasting, baking, and drying machine operators and tenders\",7915\r\nFood batchmakers,54920\r\nFood cooking machine operators and tenders,4950\r\n\"Food processing workers, all other\",101680\r\nComputer control programmers and operators,78395\r\n\"Extruding and drawing machine setters, operators, and tenders, metal and plastic\",10940\r\n\"Forging machine setters, operators, and tenders, metal and plastic\",5425\r\n\"Rolling machine setters, operators, and tenders, metal and plastic\",8205\r\n\"Cutting, punching, and press machine setters, operators, and tenders, metal and plastic\",66920\r\n\"Drilling and boring machine tool setters, operators, and tenders, metal and plastic\",4055\r\n\"Grinding, lapping, polishing, and buffing machine tool setters, operators, and tenders, metal and plastic\",34860\r\n\"Lathe and turning machine tool setters, operators, and tenders, metal and plastic\",7470\r\n\"Milling and planing machine setters, operators, and tenders, metal and plastic\",1735\r\nMachinists,279605\r\n\"Metal furnace operators, tenders, pourers, and casters\",19580\r\n\"Model makers and patternmakers, metal and plastic\",4225\r\n\"Molders and molding machine setters, operators, and tenders, metal and plastic\",31895\r\n\"Multiple machine tool setters, operators, and tenders, metal and plastic\",1910\r\nTool and die makers,48630\r\n\"Welding, soldering, and brazing workers\",419635\r\n\"Heat treating equipment setters, operators, and tenders, metal and plastic\",6355\r\n\"Layout workers, metal and plastic\",4705\r\n\"Plating and coating machine setters, operators, and tenders, metal and plastic\",11585\r\n\"Tool grinders, filers, and sharpeners\",4845\r\n\"Metal workers and plastic workers, all other\",299055\r\nPrepress technicians and workers,16770\r\n\"Printing workers, except prepress technicians and workers\",149315\r\nLaundry and dry-cleaning workers,108080\r\n\"Pressers, textile, garment, and related materials\",22605\r\nSewing machine operators,121160\r\nShoe and leather workers and repairers,7900\r\nShoe machine operators and tenders,2110\r\n\"Tailors, dressmakers, and sewers\",38080\r\nTextile bleaching and dyeing machine operators and tenders,1115\r\n\"Textile cutting machine setters, operators, and tenders\",5505\r\n\"Textile knitting and weaving machine setters, operators, and tenders\",7000\r\n\"Textile winding, twisting, and drawing out machine setters, operators, and tenders\",8735\r\nFabric and apparel patternmakers,2115\r\nUpholsterers,22370\r\n\"Miscellaneous textile, apparel, and furnishings workers, including extruding and forming machine setters, operators, and tenders, synthetic and glass fibers\",10895\r\nCabinetmakers and bench carpenters,40570\r\nFurniture finishers,7170\r\n\"Sawing machine setters, operators, and tenders, wood\",23025\r\n\"Woodworking machine setters, operators, and tenders, except sawing\",14145\r\n\"Miscellaneous woodworkers, including model makers and patternmakers\",21450\r\n\"Power plant operators, distributors, and dispatchers\",41625\r\nStationary engineers and boiler operators,78230\r\nWater and wastewater treatment plant and system operators,75410\r\nMiscellaneous plant and system operators,35855\r\n\"Chemical processing machine setters, operators, and tenders\",46140\r\n\"Crushing, grinding, polishing, mixing, and blending workers\",59880\r\nCutting workers,46755\r\n\"Extruding, forming, pressing, and compacting machine setters, operators, and tenders\",22360\r\n\"Furnace, kiln, oven, drier, and kettle operators and tenders\",9560\r\n\"Inspectors, testers, sorters, samplers, and weighers\",622610\r\nJewelers and precious stone and metal workers,24280\r\n\"Medical, dental, and ophthalmic laboratory technicians\",55020\r\nPackaging and filling machine operators and tenders,182670\r\nPainting workers,115490\r\nPhotographic process workers and processing machine operators,15775\r\nSemiconductor processors,1740\r\nAdhesive bonding machine operators and tenders,6495\r\n\"Cleaning, washing, and metal pickling equipment operators and tenders\",3545\r\nCooling and freezing equipment operators and tenders,2325\r\nEtchers and engravers,7545\r\n\"Molders, shapers, and casters, except metal and plastic\",20205\r\n\"Paper goods machine setters, operators, and tenders\",22385\r\nTire builders,11735\r\nHelpers--production workers,19080\r\n\"Production workers, all other\",863240\r\nSupervisors of transportation and material moving workers,188070\r\nAircraft pilots and flight engineers,101330\r\nAir traffic controllers and airfield operations specialists,27775\r\nFlight attendants,50875\r\n\"Ambulance drivers and attendants, except emergency medical technicians\",9420\r\nBus drivers,276050\r\nDriver/sales workers and truck drivers,2565940\r\nTaxi drivers and chauffeurs,293550\r\n\"Motor vehicle operators, all other\",15665\r\nLocomotive engineers and operators,42925\r\n\"Railroad brake, signal, and switch operators\",3260\r\nRailroad conductors and yardmasters,41835\r\n\"Subway, streetcar, and other rail transportation workers\",13755\r\nSailors and marine oilers,13090\r\nShip and boat captains and operators,23105\r\nShip engineers,2965\r\nBridge and lock tenders,3855\r\nParking lot attendants,37650\r\nAutomotive and watercraft service attendants,42300\r\nTransportation inspectors,38205\r\n\"Transportation attendants, except flight attendants\",14060\r\nOther transportation workers,15160\r\nConveyor operators and tenders,4195\r\nCrane and tower operators,51180\r\n\"Dredge, excavating, and loading machine operators\",25365\r\nHoist and winch operators,5515\r\nIndustrial truck and tractor operators,457890\r\nCleaners of vehicles and equipment,186080\r\n\"Laborers and freight, stock, and material movers, hand\",1142585\r\nMachine feeders and offbearers,14050\r\n\"Packers and packagers, hand\",252085\r\nPumping station operators,18880\r\nRefuse and recyclable material collectors,59975\r\nMine shuttle car operators,730\r\n\"Tank car, truck, and ship loaders\",3875\r\n\"Material moving workers, all other\",27950\r\n`;","import React, { useState } from 'react';\nimport { household } from './utils';\n\ntype Props = {};\n\nexport default function Household(props: Props) {\n    const [house, setHouse] = useState(household());\n\n    return (\n        <div>\n            <div style={{\n                maxWidth: '700px',\n                color: 'white',\n                margin: '10px'\n            }}>\n                {house.map((p) => {\n                    const { age, species, shape, sex, variants, job } = p;\n                    return <div>{`${sex} ${species} (${shape}%${variants.length > 0 ? ', ' + variants : ''\n                        }), ${age} yr${job == null ? '' : ` (${job})`}`}</div>;\n                })}\n            </div>\n            <button onClick={() => setHouse(household())}>Generate</button>\n        </div>\n    );\n}","import React from 'react';\nimport MapGrid from './MapGrid';\nimport Household from './Household';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"mainPage\">\n      <header className=\"header\">\n        City of Elseways Map\n      </header>\n      <main>\n        <MapGrid rows={18} cols={25} tileSize={24} />\n        <Household />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}