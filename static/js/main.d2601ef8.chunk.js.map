{"version":3,"sources":["MapGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["gridDefs","require","MapGrid","props","rows","cols","tileSize","useState","focus","setFocus","gridChar","grid","charAt","focusTile","style","border","height","width","margin","onMouseLeave","size","out","row","col","ch","push","x","y","onMouseOver","onClick","console","log","fill","color","stroke","makeRects","fontSize","fontFamily","fontWeight","name","description","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kyFAKMA,EAAWC,EAAQ,IAQV,SAASC,EAAQC,GAAe,IACnCC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,KAAMC,EAAaH,EAAbG,SADsB,EAGhBC,mBAAkC,MAHlB,mBAGnCC,EAHmC,KAG5BC,EAH4B,KAIpCC,EAAoB,MAATF,EAAgB,IAAMG,EAAKH,EAAM,IAAII,OAAOJ,EAAM,IAE7DK,EAAYb,EAASU,GA0B3B,OACI,sBAAKI,MAAO,CAAEC,OAAQ,mBAAtB,UACI,qBACIC,OAAQZ,EAAOE,EACfW,MAAOZ,EAAOC,EACdQ,MACI,CACIC,OAAQ,kBACRG,OAAQ,QAGhBC,aAAc,kBAAMV,EAAS,OATjC,SA1BR,SAAmBL,EAAcC,EAAce,GAE3C,IADA,IAAMC,EAAM,GAD6C,WAEhDC,GACL,IAHqD,eAG5CC,GACL,IAAMC,EAAKb,EAAKW,GAAKC,GACrBF,EAAII,KACA,sBACIC,EAAGH,EAAMH,EACTO,EAAGL,EAAMF,EACTH,MAAOG,EACPJ,OAAQI,EACRQ,YAAa,kBAAMnB,EAAS,CAACa,EAAKC,KAClCM,QAAS,kBAAMC,QAAQC,IAAI,CAACT,EAAKC,KACjCT,MAAO,CACHkB,KAAMhC,EAASwB,GAAIS,MACnBC,OAAQ,0BAZfX,EAAM,EAAGA,EAAMlB,EAAMkB,IAAQ,EAA7BA,IADJD,EAAM,EAAGA,EAAMlB,EAAMkB,IAAQ,EAA7BA,GAmBT,OAAOD,EAgBEc,CAAU/B,EAAMC,EAAMC,KAE3B,qBAAKQ,MACD,CACIsB,SAAU,OACVC,WAAY,UACZC,WAAY,IACZL,MAAO,QACPf,OAAQ,sBANhB,SASc,MAATV,EAAgB,qBAAuBK,EAAU0B,OAEtD,qBAAKzB,MACD,CACIsB,SAAU,OACVC,WAAY,UACZC,WAAY,IACZL,MAAO,QACPf,OAAQ,sBANhB,SASc,MAATV,EAAgB,IAAMK,EAAU2B,iB,MC/DlCC,MAbf,WACE,OACE,sBAAKC,UAAU,WAAf,UACE,wBAAQA,UAAU,SAAlB,kCAGA,+BACE,cAACxC,EAAD,CAASE,KAAM,GAAIC,KAAM,GAAIC,SAAU,WCGhCqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2601ef8.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport grid from './grid.json';\n\n// import as an \"any\" to get around some typechecking\nconst gridDefs = require('./gridDefs.json');\n\ntype Props = {\n    rows: number,\n    cols: number,\n    tileSize: number\n}\n\nexport default function MapGrid(props: Props) {\n    const { rows, cols, tileSize } = props;\n\n    const [focus, setFocus] = useState<[number, number] | null>(null);\n    const gridChar = focus == null ? '.' : grid[focus[0]].charAt(focus[1]);\n\n    const focusTile = gridDefs[gridChar];\n\n    function makeRects(rows: number, cols: number, size: number) {\n        const out = [];\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                const ch = grid[row][col];\n                out.push(\n                    <rect\n                        x={col * size}\n                        y={row * size}\n                        width={size}\n                        height={size}\n                        onMouseOver={() => setFocus([row, col])}\n                        onClick={() => console.log([row, col])}\n                        style={{\n                            fill: gridDefs[ch].color,\n                            stroke: 'rgba(0, 0, 0, 0.3)'\n                        }}\n                    />\n                )\n            }\n        }\n        return out;\n    }\n\n    return (\n        <div style={{ border: '1px solid white' }}>\n            <svg\n                height={rows * tileSize}\n                width={cols * tileSize}\n                style={\n                    {\n                        border: '1px solid white',\n                        margin: '10px'\n                    }\n                }\n                onMouseLeave={() => setFocus(null)}\n            >\n                {makeRects(rows, cols, tileSize)}\n            </svg>\n            <div style={\n                {\n                    fontSize: '18px',\n                    fontFamily: 'Raleway',\n                    fontWeight: 300,\n                    color: 'white',\n                    margin: '0px 10px 10px 10px'\n                }\n            }>\n                {focus == null ? 'Hover over the map' : focusTile.name}\n            </div>\n            <div style={\n                {\n                    fontSize: '14px',\n                    fontFamily: 'Raleway',\n                    fontWeight: 300,\n                    color: 'white',\n                    margin: '0px 10px 10px 10px'\n                }\n            }>\n                {focus == null ? ' ' : focusTile.description}\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport MapGrid from './MapGrid';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"mainPage\">\n      <header className=\"header\">\n        City of Elseways Map\n      </header>\n      <main>\n        <MapGrid rows={18} cols={25} tileSize={16} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}